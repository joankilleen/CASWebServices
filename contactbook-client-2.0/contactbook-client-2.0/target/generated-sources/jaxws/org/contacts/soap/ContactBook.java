
package org.contacts.soap;

import java.util.List;
import java.util.concurrent.Future;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.8
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ContactBook", targetNamespace = "http://example.org/contactbook")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ContactBook {


    /**
     * 
     * @param id
     * @return
     *     returns javax.xml.ws.Response<org.contacts.soap.FindContactResponse>
     */
    @WebMethod(operationName = "findContact")
    @RequestWrapper(localName = "findContact", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.FindContact")
    @ResponseWrapper(localName = "findContactResponse", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.FindContactResponse")
    public Response<FindContactResponse> findContactAsync(
        @WebParam(name = "id", targetNamespace = "")
        long id);

    /**
     * 
     * @param id
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "findContact")
    @RequestWrapper(localName = "findContact", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.FindContact")
    @ResponseWrapper(localName = "findContactResponse", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.FindContactResponse")
    public Future<?> findContactAsync(
        @WebParam(name = "id", targetNamespace = "")
        long id,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<FindContactResponse> asyncHandler);

    /**
     * 
     * @param id
     * @return
     *     returns org.contacts.soap.Contact
     * @throws NotFoundFault
     */
    @WebMethod
    @WebResult(name = "contact", targetNamespace = "")
    @RequestWrapper(localName = "findContact", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.FindContact")
    @ResponseWrapper(localName = "findContactResponse", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.FindContactResponse")
    public Contact findContact(
        @WebParam(name = "id", targetNamespace = "")
        long id)
        throws NotFoundFault
    ;

    /**
     * 
     * @param name
     * @return
     *     returns javax.xml.ws.Response<org.contacts.soap.SearchContactsResponse>
     */
    @WebMethod(operationName = "searchContacts")
    @RequestWrapper(localName = "searchContacts", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.SearchContacts")
    @ResponseWrapper(localName = "searchContactsResponse", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.SearchContactsResponse")
    public Response<SearchContactsResponse> searchContactsAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @param name
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "searchContacts")
    @RequestWrapper(localName = "searchContacts", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.SearchContacts")
    @ResponseWrapper(localName = "searchContactsResponse", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.SearchContactsResponse")
    public Future<?> searchContactsAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SearchContactsResponse> asyncHandler);

    /**
     * 
     * @param name
     * @return
     *     returns java.util.List<org.contacts.soap.Contact>
     */
    @WebMethod
    @WebResult(name = "contact", targetNamespace = "")
    @RequestWrapper(localName = "searchContacts", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.SearchContacts")
    @ResponseWrapper(localName = "searchContactsResponse", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.SearchContactsResponse")
    public List<Contact> searchContacts(
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @param phone
     * @param name
     * @param email
     * @return
     *     returns javax.xml.ws.Response<org.contacts.soap.CreateContactResponse>
     */
    @WebMethod(operationName = "createContact")
    @RequestWrapper(localName = "createContact", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.CreateContact")
    @ResponseWrapper(localName = "createContactResponse", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.CreateContactResponse")
    public Response<CreateContactResponse> createContactAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "phone", targetNamespace = "")
        String phone,
        @WebParam(name = "email", targetNamespace = "")
        String email);

    /**
     * 
     * @param phone
     * @param name
     * @param asyncHandler
     * @param email
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "createContact")
    @RequestWrapper(localName = "createContact", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.CreateContact")
    @ResponseWrapper(localName = "createContactResponse", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.CreateContactResponse")
    public Future<?> createContactAsync(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "phone", targetNamespace = "")
        String phone,
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CreateContactResponse> asyncHandler);

    /**
     * 
     * @param phone
     * @param name
     * @param email
     * @return
     *     returns long
     */
    @WebMethod
    @WebResult(name = "id", targetNamespace = "")
    @RequestWrapper(localName = "createContact", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.CreateContact")
    @ResponseWrapper(localName = "createContactResponse", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.CreateContactResponse")
    public long createContact(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "phone", targetNamespace = "")
        String phone,
        @WebParam(name = "email", targetNamespace = "")
        String email);

    /**
     * 
     * @param contact
     * @return
     *     returns javax.xml.ws.Response<org.contacts.soap.UpdateContactResponse>
     */
    @WebMethod(operationName = "updateContact")
    @RequestWrapper(localName = "updateContact", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.UpdateContact")
    @ResponseWrapper(localName = "updateContactResponse", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.UpdateContactResponse")
    public Response<UpdateContactResponse> updateContactAsync(
        @WebParam(name = "contact", targetNamespace = "")
        Contact contact);

    /**
     * 
     * @param contact
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "updateContact")
    @RequestWrapper(localName = "updateContact", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.UpdateContact")
    @ResponseWrapper(localName = "updateContactResponse", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.UpdateContactResponse")
    public Future<?> updateContactAsync(
        @WebParam(name = "contact", targetNamespace = "")
        Contact contact,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<UpdateContactResponse> asyncHandler);

    /**
     * 
     * @param contact
     * @throws NotFoundFault
     */
    @WebMethod
    @RequestWrapper(localName = "updateContact", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.UpdateContact")
    @ResponseWrapper(localName = "updateContactResponse", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.UpdateContactResponse")
    public void updateContact(
        @WebParam(name = "contact", targetNamespace = "")
        Contact contact)
        throws NotFoundFault
    ;

    /**
     * 
     * @param id
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "deleteContact", targetNamespace = "http://example.org/contactbook", className = "org.contacts.soap.DeleteContact")
    public void deleteContact(
        @WebParam(name = "id", targetNamespace = "")
        long id);

}
